(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return l}));var a=n(3),s=n(7),i=(n(0),n(104)),r={title:"Testing Patterns"},c={unversionedId:"testing-patterns",id:"testing-patterns",isDocsHomePage:!1,title:"Testing Patterns",description:"Unit testing patterns are still in flux. This is all subject to change.",source:"@site/docs/testing-patterns.md",slug:"/testing-patterns",permalink:"/testing-patterns",editUrl:"https://github.com/retreon/website/edit/main/docs/testing-patterns.md",version:"current",sidebar:"someSidebar",previous:{title:"Style Guide",permalink:"/style-guide"}},o=[],d={rightToc:o};function l(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Unit testing patterns are still in flux. This is all subject to change."))),Object(i.b)("p",null,"Retreon recommends testing your actions and reducers against a real redux store. Create a new store each test, run your actions, then assert on the new state."),Object(i.b)("p",null,"This works particularly well when you ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/style-guide#separate-your-effects"}),"separate effects from actions"),", and then you can mock the IO boundary and simulate different scenarios."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"jest.mock('../effects')\n\ntest('fetch user details', async () => {\n  effects.fetchUserDetails.mockResolvedValue({ user })\n\n  await store.dispatch(actions.fetchUserDetails(user.id))\n  expect(store.getState()).toMatchObject({\n    users: { [user.id]: user },\n  })\n})\n\ntest('fetch user details with error notice on request failure', async () => {\n  effects.fetchUserDetails.mockRejectedValue(new Error('Request failed.'))\n\n  await store.dispatch(actions.fetchUserDetails(user.id))\n  expect(store.getState()).toMatchObject({\n    loadingState: 'error',\n  })\n})\n")))}l.isMDXComponent=!0}}]);