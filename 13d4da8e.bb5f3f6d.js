(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{62:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(7),c=(a(0),a(104)),o={title:"Advanced Usage"},s={unversionedId:"advanced-usage",id:"advanced-usage",isDocsHomePage:!1,title:"Advanced Usage",description:"Retreon offers an escape hatch for situations where createAction(...) just doesn't cut it. You should use this sparingly, not because it's bad, but because it takes you off the beaten path.",source:"@site/docs/advanced-usage.md",slug:"/advanced-usage",permalink:"/advanced-usage",editUrl:"https://github.com/retreon/website/edit/main/docs/advanced-usage.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating Reducers",permalink:"/creating-reducers"},next:{title:"Style Guide",permalink:"/style-guide"}},i=[{value:"Action Factories",id:"action-factories",children:[{value:"Ordering Rules",id:"ordering-rules",children:[]}]}],l={rightToc:i};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Retreon offers an escape hatch for situations where ",Object(c.b)("inlineCode",{parentName:"p"},"createAction(...)")," just doesn't cut it. You should use this sparingly, not because it's bad, but because it takes you off the beaten path."),Object(c.b)("p",null,"Retreon is powered by async generator functions. Every ",Object(c.b)("inlineCode",{parentName:"p"},"yield")," statement is a dispatch, and the return of ",Object(c.b)("inlineCode",{parentName:"p"},"yield")," is whatever dispatch returned. In practice, this gives you the full power of ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/reduxjs/redux-thunk/"}),"redux-thunk")," while leveraging the expressiveness of modern JavaScript."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"async function* sequence() {\n  yield { type: 'first-action' }\n  await someEffect()\n  yield { type: 'second-action' }\n\n  return 'result'\n}\n\nstore.dispatch(sequence()) // Promise { \"result\" }\n")),Object(c.b)("p",null,"These are just a few things that async generator functions can do:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Consume streams or observables into a sequence of dispatches."),Object(c.b)("li",{parentName:"ul"},"Conditionally quit without dispatching an action."),Object(c.b)("li",{parentName:"ul"},"Run code ",Object(c.b)("em",{parentName:"li"},"after")," a dispatch."),Object(c.b)("li",{parentName:"ul"},"Provide progress updates on long-running tasks.")),Object(c.b)("p",null,"Further, because the result of ",Object(c.b)("inlineCode",{parentName:"p"},"dispatch(...)")," is returned to ",Object(c.b)("inlineCode",{parentName:"p"},"yield"),", you can infinitely extend this pattern through redux middleware. How about a special ",Object(c.b)("inlineCode",{parentName:"p"},"yield")," value that returns redux state? Surprisingly easy:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"// Redux middleware\nexport const GET_STATE = Symbol('middleware:GET_STATE')\n\nexport const middleware = store => next => action => {\n  return action === GET_STATE ? store.getState() : next(action)\n}\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"// Actions file\nimport { GET_STATE } from './middleware'\n\nasync function* selectState() {\n  const reduxState = yield GET_STATE\n}\n")),Object(c.b)("p",null,"As you can see, generators offer a lot of power. Be careful not to overuse it."),Object(c.b)("h2",{id:"action-factories"},"Action Factories"),Object(c.b)("p",null,"The first problem you might encounter with async generators is what to dispatch. We've never shown how to create an ",Object(c.b)("inlineCode",{parentName:"p"},'"optimistic"')," action outside the framework, nor does retreon want to expose those details. Not yet, at least."),Object(c.b)("p",null,"The next problem is listening for actions. What do you pass to ",Object(c.b)("inlineCode",{parentName:"p"},"handleAction(...)"),"? The generator? How would it know the action type?"),Object(c.b)("p",null,"Action factories address both of those problems. It provides a small interface for creating action objects (error, success, optimistic) without needing to know the structure, and you can use it as a handle for ",Object(c.b)("inlineCode",{parentName:"p"},"createReducer(...)")," while preserving type safety."),Object(c.b)("p",null,"You'll use ",Object(c.b)("inlineCode",{parentName:"p"},"createAction.factory(...)")," to instantiate a handle:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"// Please don't actually call this \"factory\". Name it by what it does.\nexport const factory = createAction.factory('action-type')\n")),Object(c.b)("p",null,"From there, you can dispatch errors, optimistic actions, and success events."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"async function* allActions() {\n  yield factory.optimistic('optimistic payload')\n  yield factory.success('success payload')\n  yield factory.failure(new Error('Something went wrong'))\n}\n")),Object(c.b)("p",null,"Then pass the same handle to the reducer."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"createReducer(initialState, (handleAction) => [\n  handleAction.optimistic(factory, () => {}),\n  handleAction.error(factory, () => {}),\n  handleAction(factory, () => {}),\n])\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Note for TypeScript"),": Define generics to allow optimistic and success payloads. The payload parameters are disabled by default."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"createAction.factory<SuccessPayload, OptimisticPayload>('action-type')\n")),Object(c.b)("h3",{id:"ordering-rules"},"Ordering Rules"),Object(c.b)("p",null,"To preserve the sanity of your fellow developers, please observe the rules for actions:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Dispatch EITHER an error OR a success event (never both)."),Object(c.b)("li",{parentName:"ul"},"NEVER dispatch an error twice for the same action."),Object(c.b)("li",{parentName:"ul"},"NEVER dispatch a success event twice for the same action."),Object(c.b)("li",{parentName:"ul"},"Optimistic updates must ALWAYS precede success/error events.")),Object(c.b)("p",null,'If you must dispatch multiple actions of the same type (e.g. in a stream), use "optimistic".'))}u.isMDXComponent=!0}}]);